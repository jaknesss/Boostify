/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { approveReturnBorrowedVinyl } from '../fn/vinyl/approve-return-borrowed-vinyl';
import { ApproveReturnBorrowedVinyl$Params } from '../fn/vinyl/approve-return-borrowed-vinyl';
import { borrowVinyl } from '../fn/vinyl/borrow-vinyl';
import { BorrowVinyl$Params } from '../fn/vinyl/borrow-vinyl';
import { findAllBorrowedVinyls } from '../fn/vinyl/find-all-borrowed-vinyls';
import { FindAllBorrowedVinyls$Params } from '../fn/vinyl/find-all-borrowed-vinyls';
import { findAllReturnedVinyls } from '../fn/vinyl/find-all-returned-vinyls';
import { FindAllReturnedVinyls$Params } from '../fn/vinyl/find-all-returned-vinyls';
import { findAllVinyls } from '../fn/vinyl/find-all-vinyls';
import { FindAllVinyls$Params } from '../fn/vinyl/find-all-vinyls';
import { findAllVinylsByOwner } from '../fn/vinyl/find-all-vinyls-by-owner';
import { FindAllVinylsByOwner$Params } from '../fn/vinyl/find-all-vinyls-by-owner';
import { findBookById } from '../fn/vinyl/find-book-by-id';
import { FindBookById$Params } from '../fn/vinyl/find-book-by-id';
import { PageResponseBorrowedVinylsResponse } from '../models/page-response-borrowed-vinyls-response';
import { PageResponseVinylResponse } from '../models/page-response-vinyl-response';
import { returnBorrowedVinyl } from '../fn/vinyl/return-borrowed-vinyl';
import { ReturnBorrowedVinyl$Params } from '../fn/vinyl/return-borrowed-vinyl';
import { saveVinyl } from '../fn/vinyl/save-vinyl';
import { SaveVinyl$Params } from '../fn/vinyl/save-vinyl';
import { updateArchivedStatus } from '../fn/vinyl/update-archived-status';
import { UpdateArchivedStatus$Params } from '../fn/vinyl/update-archived-status';
import { updateShareableStatus } from '../fn/vinyl/update-shareable-status';
import { UpdateShareableStatus$Params } from '../fn/vinyl/update-shareable-status';
import { uploadVinylCover } from '../fn/vinyl/upload-vinyl-cover';
import { UploadVinylCover$Params } from '../fn/vinyl/upload-vinyl-cover';
import { VinylResponse } from '../models/vinyl-response';

@Injectable({ providedIn: 'root' })
export class VinylService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAllVinyls()` */
  static readonly FindAllVinylsPath = '/vinyls';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllVinyls()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllVinyls$Response(params?: FindAllVinyls$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseVinylResponse>> {
    return findAllVinyls(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllVinyls$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllVinyls(params?: FindAllVinyls$Params, context?: HttpContext): Observable<PageResponseVinylResponse> {
    return this.findAllVinyls$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseVinylResponse>): PageResponseVinylResponse => r.body)
    );
  }

  /** Path part for operation `saveVinyl()` */
  static readonly SaveVinylPath = '/vinyls';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveVinyl()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveVinyl$Response(params: SaveVinyl$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return saveVinyl(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveVinyl$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveVinyl(params: SaveVinyl$Params, context?: HttpContext): Observable<number> {
    return this.saveVinyl$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `uploadVinylCover()` */
  static readonly UploadVinylCoverPath = '/vinyls/cover/{vinyl-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadVinylCover()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadVinylCover$Response(params: UploadVinylCover$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return uploadVinylCover(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadVinylCover$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadVinylCover(params: UploadVinylCover$Params, context?: HttpContext): Observable<number> {
    return this.uploadVinylCover$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateShareableStatus()` */
  static readonly UpdateShareableStatusPath = '/vinyls/shareable/{vinyl-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateShareableStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateShareableStatus$Response(params: UpdateShareableStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateShareableStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateShareableStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateShareableStatus(params: UpdateShareableStatus$Params, context?: HttpContext): Observable<number> {
    return this.updateShareableStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `borrowVinyl()` */
  static readonly BorrowVinylPath = '/vinyls/borrow/{vinyl-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `borrowVinyl()` instead.
   *
   * This method doesn't expect any request body.
   */
  borrowVinyl$Response(params: BorrowVinyl$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return borrowVinyl(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `borrowVinyl$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  borrowVinyl(params: BorrowVinyl$Params, context?: HttpContext): Observable<number> {
    return this.borrowVinyl$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `returnBorrowedVinyl()` */
  static readonly ReturnBorrowedVinylPath = '/vinyls/borrow/return/{vinyl-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `returnBorrowedVinyl()` instead.
   *
   * This method doesn't expect any request body.
   */
  returnBorrowedVinyl$Response(params: ReturnBorrowedVinyl$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return returnBorrowedVinyl(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `returnBorrowedVinyl$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  returnBorrowedVinyl(params: ReturnBorrowedVinyl$Params, context?: HttpContext): Observable<number> {
    return this.returnBorrowedVinyl$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `approveReturnBorrowedVinyl()` */
  static readonly ApproveReturnBorrowedVinylPath = '/vinyls/borrow/return/approve/{vinyl-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `approveReturnBorrowedVinyl()` instead.
   *
   * This method doesn't expect any request body.
   */
  approveReturnBorrowedVinyl$Response(params: ApproveReturnBorrowedVinyl$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return approveReturnBorrowedVinyl(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `approveReturnBorrowedVinyl$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  approveReturnBorrowedVinyl(params: ApproveReturnBorrowedVinyl$Params, context?: HttpContext): Observable<number> {
    return this.approveReturnBorrowedVinyl$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateArchivedStatus()` */
  static readonly UpdateArchivedStatusPath = '/vinyls/archived/{vinyl-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateArchivedStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateArchivedStatus$Response(params: UpdateArchivedStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateArchivedStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateArchivedStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateArchivedStatus(params: UpdateArchivedStatus$Params, context?: HttpContext): Observable<number> {
    return this.updateArchivedStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findBookById()` */
  static readonly FindBookByIdPath = '/vinyls/{vinyl-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findBookById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findBookById$Response(params: FindBookById$Params, context?: HttpContext): Observable<StrictHttpResponse<VinylResponse>> {
    return findBookById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findBookById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findBookById(params: FindBookById$Params, context?: HttpContext): Observable<VinylResponse> {
    return this.findBookById$Response(params, context).pipe(
      map((r: StrictHttpResponse<VinylResponse>): VinylResponse => r.body)
    );
  }

  /** Path part for operation `findAllReturnedVinyls()` */
  static readonly FindAllReturnedVinylsPath = '/vinyls/returned';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllReturnedVinyls()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReturnedVinyls$Response(params?: FindAllReturnedVinyls$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBorrowedVinylsResponse>> {
    return findAllReturnedVinyls(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllReturnedVinyls$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReturnedVinyls(params?: FindAllReturnedVinyls$Params, context?: HttpContext): Observable<PageResponseBorrowedVinylsResponse> {
    return this.findAllReturnedVinyls$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseBorrowedVinylsResponse>): PageResponseBorrowedVinylsResponse => r.body)
    );
  }

  /** Path part for operation `findAllVinylsByOwner()` */
  static readonly FindAllVinylsByOwnerPath = '/vinyls/owner';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllVinylsByOwner()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllVinylsByOwner$Response(params?: FindAllVinylsByOwner$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseVinylResponse>> {
    return findAllVinylsByOwner(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllVinylsByOwner$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllVinylsByOwner(params?: FindAllVinylsByOwner$Params, context?: HttpContext): Observable<PageResponseVinylResponse> {
    return this.findAllVinylsByOwner$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseVinylResponse>): PageResponseVinylResponse => r.body)
    );
  }

  /** Path part for operation `findAllBorrowedVinyls()` */
  static readonly FindAllBorrowedVinylsPath = '/vinyls/borrowed';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllBorrowedVinyls()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBorrowedVinyls$Response(params?: FindAllBorrowedVinyls$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBorrowedVinylsResponse>> {
    return findAllBorrowedVinyls(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllBorrowedVinyls$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBorrowedVinyls(params?: FindAllBorrowedVinyls$Params, context?: HttpContext): Observable<PageResponseBorrowedVinylsResponse> {
    return this.findAllBorrowedVinyls$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseBorrowedVinylsResponse>): PageResponseBorrowedVinylsResponse => r.body)
    );
  }

}
